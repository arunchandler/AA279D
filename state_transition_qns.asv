function [Phi_kep,Phi_J2] = state_transition_qns(oe_c, dt)
%STATE_TRANSITION_QNS Compute Keplerian and J2-perturbed STMs for QNS ROEs
%   [Phi_kep,Phi_J2] = state_transition_qns(oe_c, dt)
%   oe_c = [a, e, i, RAAN, omega, M] of the chief (rad, m)
%   dt = time step (s)
%   Phi_kep = expm(A_kep * dt)
%   Phi_J2  = J^{-1}(omega_c) * expm((A_kep + A_J2) * dt) * J(omega_c)

global mu J2 Re

% Keplerian plant matrix
A_kep = A_kep_qns(oe_c);
% J2-only plant matrix in \nabla"-rotated QNS basis
A_J2  = A_J2_qns0(oe_c);

% Keplerian STM
Phi_kep = expm(A_kep * dt);

% J2 STM with coordinate transform
J    = compute_Jqns(oe_c(5));
Jinv = compute_Jqns_inv(oe_c(5));
Phi0 = expm((A_kep + A_J2) * dt);
Phi_J2 = Jinv * Phi0 * J;
end

function A = A_kep_qns(oe)
% Keplerian relative dynamics for QNS ROEs
a = oe(1);
n = sqrt(mu / a^3);
A = zeros(6);
A(2,1) = -1.5 * n;
end

function A = A_J2_qns0(oe)
% First-order J2 perturbation STM in modified QNS basis (Eq.Â 24)
a = oe(1); e = oe(2); i = oe(3);
eta = sqrt(1 - e^2);
kappa = (3 * J2 * Re^2 * sqrt(mu)) / (4 * a^(7/2) * eta^4);

% Auxiliary substitutions (E, F, G, P, Q, S, T)
E = 1 + eta;
G = 1/eta^2;
F = 4 + 3*eta;
P = 3*cos(i)^2 - 1;
Q = 5*cos(i)^2 - 1;
S = sin(2*i);
T = sin(i)^2;
%R = cos(i);
%U = sin(i);
%V = tan(i/2);
%W = cos(i/2)^2;

A = zeros(6);
% Row 2
A(2,1) = -7/2 * kappa * E * P;
A(2,3) =     kappa * e * F * G * P;
A(2,5) =    -kappa * F * S;
% Row 4
A(4,1) = -7/2 * kappa * e * Q;
A(4,3) =     kappa * 4 * e^2 * G * Q;
A(4,5) =    -kappa * 5 * e * S;
% Row 6
A(6,1) =  7/2 * kappa * S;
A(6,3) =    -4    * kappa * e * G * S;
A(6,5) =     2    * kappa * T;
end

function J = compute_Jqns(omega_c)
% Rotate qns eccentricity vector by omega_c to align perturbation basis
J = [1 0 0 0 0 0;
     0 1 0 0 0 0;
     0 0 cos(omega_c) sin(omega_c) 0 0;
     0 0 -sin(omega_c) cos(omega_c) 0 0;
     0 0 0 0 1 0;
     0 0 0 0 0 1];
end

function Jinv = compute_Jqns_inv(omega_c)
% Inverse rotation for back-transformation
Jinv = eye(6);
Jinv(3:4,3:4) = [cos(omega_c), -sin(omega_c); sin(omega_c), cos(omega_c)];
end
