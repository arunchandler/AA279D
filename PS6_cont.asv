%% main_reduced_control.m
% Continuous formation-keeping via reduced-state ROE ODE + Lyapunov feedback
clc; clear; close all;
addpath('mean_osc','control_funcs');   % add your utility function paths
format long g;

global mu J2 Re tol s_d
mu   = 3.986004418e14;    % m^3/s^2
J2   = 1.082626e-3;
Re   = 6378137;           % m
tol  = 1e-10;
s_d  = 86400;             % s/day

% 1) Scenario and nominal relative orbital elements (ROE) without mean longitude
scenario = input(''Select formation-keeping scenario:\n 1: Hold M-D2\n 2: Hold M-D3\nYour choice: '');
switch scenario
    case 1
        rel_nom = [0; 0; 0; 300; 0];  % [delta_a; delta_ex; delta_ey; delta_ix; delta_iy]
        scenario_name = 'Hold M-D2';
    case 2
        rel_nom = [0; 0; 0; 300; 0];
        scenario_name = 'Hold M-D3';
    otherwise
        error(''Invalid scenario'');
end
fprintf(''Running "%s" with nominal ROE = [%g %g %g %g %g]\n'', scenario_name, rel_nom);

% append zero for delta a_dot at nominal
delta_nom = [rel_nom; 0];

% 2) Chief initial orbital elements (mean): [a; e; i; RAAN; omega; M]
a0     = 6886536.686;
e0     = 0.0001264;
i0     = deg2rad(97.4453);
RAAN0  = deg2rad(351.0108);
omega0 = deg2rad(101.2452);
M0     = deg2rad(11.6520);
oe_c   = [a0; e0; i0; RAAN0; omega0; M0];

% 3) Time grid
n0       = sqrt(mu/a0^3);
Torbit   = 2*pi/n0;
n_orbit  = 15;
t_end    = n_orbit * Torbit;
num_pts  = 1000;
t_grid   = linspace(0, t_end, num_pts)';
dt       = t_grid(2) - t_grid(1);

% 4) Lyapunov parameters and thrust limit
k     = 1e3;      % Lyapunov scaling
N_ip  = 14;       % in-plane exponent
N_oop = 14;       % out-of-plane exponent
u_max = 1e-4;     % maximum thrust accel (m/s^2)

% 5) Integrate reduced-state ODE
delta0 = delta_nom;  % start at nominal
[~, hist_delta] = ode4(@reduced_dynamics, [0 t_end], delta0, dt);

% 6) Plot results
orbit_number = t_grid / Torbit;
figure;
plot(orbit_number, hist_delta);
xlabel('Orbit Number');
ylabel(''Reduced ROE Components'');
legend(''delta_a'',''delta_ex'',''delta_ey'',''delta_ix'',''delta_iy'',''delta_a_dot'',''Location'',''best'');
title(''Continuous Reduced-State Lyapunov Control'');

% nested ODE for reduced-state dynamics
function delta_dot = reduced_dynamics(~, delta)
    % delta = [delta_a; delta_ex; delta_ey; delta_ix; delta_iy; delta_a_dot]
    % uses oe_c, delta_nom, k, N_ip, N_oop, u_max from parent scope

    % 1) build reduced plant and input matrices
    [A_c, B_c] = plant_reduced_qns(oe_c);

    % 2) tracking error
    Delta = delta - delta_nom;

    % 3) compute P matrix (Lyapunov gain)
    phi_ip  = atan2(delta(4), delta(3));
    phi_oop = atan2(delta(6), delta(5));
    P       = (1/k) * diag([ ...
                  cos(phi_ip)^N_ip; ...
                  cos(phi_ip)^N_ip; ...
                  cos(phi_ip)^N_ip; ...
                  cos(phi_oop)^N_oop; ...
                  cos(phi_oop)^N_oop; ...
                  1 ]);

    % 4) control law: optimal thrust [u_t; u_n]
    u = - pinv(B_c) * (A_c * delta + P * Delta);

    % 5) thrust saturation
    u = max(min(u, u_max), -u_max);

    % 6) reduced-state ODE
    delta_dot = A_c * delta + B_c * u;
end